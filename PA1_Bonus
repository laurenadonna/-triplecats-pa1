#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <pthread.h>
#include <errno.h>

#define MAX_EVENTS 64
#define MESSAGE_SIZE 16
#define DEFAULT_CLIENT_THREADS 4

char *server_ip = "127.0.0.1";
int server_port = 12345;
int num_client_threads = DEFAULT_CLIENT_THREADS;
int num_requests = 100000;

/*
 *Structure to store per-thread data in the client
 */
typedef struct {
    int epoll_fd;
    int socket_fd;
    long long total_rtt;
    long total_messages;
    float request_rate;
} client_thread_data_t;

/*
 *Function for client threads to send requests
 */
void *client_thread_func(void *arg) {
    client_thread_data_t *data = (client_thread_data_t *)arg;
    struct epoll_event event, events[MAX_EVENTS];
    char send_buf[MESSAGE_SIZE] = "CLIENT_MESSAGE";
    char recv_buf[MESSAGE_SIZE];
    struct timeval start, end;

    //Create socket
    data->socket_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (data->socket_fd < 0) {
        perror("Socket creation failed");
        pthread_exit(NULL);
    }

    //Connect to server
    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(server_port);
    inet_pton(AF_INET, server_ip, &server_addr.sin_addr);

    if (connect(data->socket_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection to server failed");
        close(data->socket_fd);
        pthread_exit(NULL);
    }

    //Create epoll instance
    data->epoll_fd = epoll_create1(0);
    if (data->epoll_fd < 0) {
        perror("Epoll creation failed");
        close(data->socket_fd);
        pthread_exit(NULL);
    }

    //Register socket with epoll
    event.events = EPOLLIN;
    event.data.fd = data->socket_fd;
    if (epoll_ctl(data->epoll_fd, EPOLL_CTL_ADD, data->socket_fd, &event) < 0) {
        perror("Epoll control failed");
        close(data->socket_fd);
        close(data->epoll_fd);
        pthread_exit(NULL);
    }

    for (int i = 0; i < num_requests; i++) {
        //Record start time
        gettimeofday(&start, NULL);

        //Send message to server
        if (send(data->socket_fd, send_buf, MESSAGE_SIZE, 0) < 0) {
            perror("Send failed");
            break;
        }

        //Wait for response using epoll
        int n = epoll_wait(data->epoll_fd, events, MAX_EVENTS, -1);
        if (n < 0) {
            perror("Epoll wait failed");
            break;
        }

        //Receive response from server
        if (recv(data->socket_fd, recv_buf, MESSAGE_SIZE, 0) < 0) {
            perror("Receive failed");
            break;
        }

        //Record end time
        gettimeofday(&end, NULL);

        //Calculate RTT
        long long rtt = (end.tv_sec - start.tv_sec) * 1000000LL + (end.tv_usec - start.tv_usec);
        data->total_rtt += rtt;
        data->total_messages++;
    }

    //Calculate request rate
    data->request_rate = (float)data->total_messages / (data->total_rtt / 1000000.0);

    //Clean up
    close(data->socket_fd);
    close(data->epoll_fd);

    return NULL;
}

/*
 *Function to start multiple client threads
 */
void run_client() {
    pthread_t threads[num_client_threads];
    client_thread_data_t thread_data[num_client_threads];
    long long total_rtt = 0;
    long total_messages = 0;
    float total_request_rate = 0.0;

    //Initialize thread data and create threads
    for (int i = 0; i < num_client_threads; i++) {
        memset(&thread_data[i], 0, sizeof(client_thread_data_t));
        pthread_create(&threads[i], NULL, client_thread_func, &thread_data[i]);
    }

    //Wait for threads to complete and aggregate metrics
    for (int i = 0; i < num_client_threads; i++) {
        pthread_join(threads[i], NULL);
        total_rtt += thread_data[i].total_rtt;
        total_messages += thread_data[i].total_messages;
        total_request_rate += thread_data[i].request_rate;
    }

    // Display statistics
    printf("Client: Average RTT: %lld us\n", total_messages > 0 ? total_rtt / total_messages : 0);
    printf("Client: Total Request Rate: %f messages/s\n", total_request_rate);
}

/*
 *Main function to handle client arguments
 */
int main(int argc, char *argv[]) {
    if (argc > 1 && strcmp(argv[1], "client") == 0) {
        if (argc > 2) server_ip = argv[2];
        if (argc > 3) server_port = atoi(argv[3]);
        if (argc > 4) num_client_threads = atoi(argv[4]);
        if (argc > 5) num_requests = atoi(argv[5]);

        run_client();
    } else {
        printf("Usage: %s client [server_ip server_port num_client_threads num_requests]\n", argv[0]);
    }

    return 0;
}
